# 深度学习模型基准测试工具 📊

## 程序简介 🎯

这是一个专业的深度学习模型性能基准测试工具，可以帮助你测试各种深度学习模型在不同数据集上的性能表现。无论你是AI研究者、学生还是工程师，这个工具都能为你提供详细的性能分析报告。

## 主要功能 ✨

### 🔧 **交互式配置**
- 智能设备选择（CPU/GPU自动检测）
- 多种模型类型支持（图像分类/目标检测）
- 丰富的预训练模型选择
- 多种标准数据集支持
- 灵活的测试样本数量设置

### 📈 **性能测试**
- **图像分类模型**：ResNet、EfficientNet、Vision Transformer等
- **目标检测模型**：YOLOv8系列
- **数据集支持**：MNIST、CIFAR-10、ImageNet样本等
- **样本数量**：从100个快速测试到完整数据集

### 📊 **详细分析**
- 实时FPS监控
- 详细时间分解（预处理、推理、后处理）
- 系统资源监控（CPU、内存、GPU使用率）
- CSV格式详细数据导出
- 专业可视化图表生成

## 系统要求 💻

### 最低配置
- **操作系统**：Windows 10/11, macOS 10.15+, Ubuntu 18.04+
- **Python版本**：Python 3.8 或更高
- **内存**：至少 8GB RAM
- **存储空间**：至少 10GB 可用空间

### 推荐配置
- **GPU**：NVIDIA显卡（支持CUDA）
- **内存**：16GB+ RAM
- **存储**：SSD硬盘

## 安装步骤 🛠️

### 步骤1：安装Python环境

**Windows用户：**
1. 访问 [Python官网](https://www.python.org/downloads/)
2. 下载Python 3.8+版本
3. 安装时勾选"Add Python to PATH"

**macOS用户：**
```bash
# 使用Homebrew安装
brew install python3
```

**Linux用户：**
```bash
# Ubuntu/Debian
sudo apt update
sudo apt install python3 python3-pip

# CentOS/RHEL
sudo yum install python3 python3-pip
```

### 步骤2：创建虚拟环境（推荐）

```bash
# 创建虚拟环境
python -m venv benchmark_env

# 激活虚拟环境
# Windows:
benchmark_env\Scripts\activate

# macOS/Linux:
source benchmark_env/bin/activate
```

### 步骤3：安装依赖包

创建 `requirements.txt` 文件，内容如下：

```txt
# 核心深度学习库
torch>=1.12.0
torchvision>=0.13.0
timm>=0.6.0

# 数据处理和科学计算
numpy>=1.21.0
pandas>=1.3.0

# 可视化
matplotlib>=3.5.0
seaborn>=0.11.0

# 系统监控
psutil>=5.8.0
nvidia-ml-py3>=7.352.0

# 目标检测（可选）
ultralytics>=8.0.0

# 其他工具
Pillow>=8.3.0
```

安装所有依赖：
```bash
pip install -r requirements.txt
```

### 步骤4：GPU支持（可选但推荐）

如果你有NVIDIA显卡，安装CUDA版本的PyTorch：

```bash
# 查看CUDA版本
nvidia-smi

# 安装CUDA版PyTorch（以CUDA 11.8为例）
pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118
```

## 使用指南 📖

### 第一次使用

1. **下载程序文件**
   ```bash
   # 将 benchmark3.py 保存到你的工作目录
   ```

2. **运行程序**
   ```bash
   python benchmark3.py
   ```

3. **按提示进行交互式配置**

### 详细操作步骤

#### 🔸 **步骤1：选择计算设备**
```
1. 选择计算设备:
1) CPU
2) CUDA:0 - NVIDIA GeForce RTX 3080

请选择设备 (输入数字, 'b'返回): 2
```
- 选择 `1` 使用CPU（兼容性好，速度较慢）
- 选择 `2` 使用GPU（速度快，需要NVIDIA显卡）

#### 🔸 **步骤2：选择模型类型**
```
2. 选择模型类型:
1) 图像分类 (Classification)
2) 目标检测 (Object Detection)

请选择模型类型 (输入数字, 'b'返回): 1
```

#### 🔸 **步骤3：选择具体模型**
```
3. 选择classification模型:
1) ResNet18
2) ResNet50
3) EfficientNet-B0
4) EfficientNet-B3
5) Vision Transformer
6) MobileNet-V3

请选择模型 (输入数字, 'b'返回): 1
```
**新手推荐：**
- `1) ResNet18` - 轻量级，速度快
- `3) EfficientNet-B0` - 平衡性能好

#### 🔸 **步骤4：选择数据集**
```
4. 选择数据集:
1) MNIST (手写数字, 28x28 -> 224x224)
2) CIFAR-10 (小物体分类, 32x32 -> 224x224)
3) ImageNet 验证集样本 (224x224)

请选择数据集 (输入数字, 'b'返回): 1
```
**新手推荐：**
- `1) MNIST` - 数据集小，下载快，适合第一次测试

#### 🔸 **步骤5：选择测试样本数量**
```
5. 选择测试样本数量:
1) 快速测试 (100 样本)
2) 中等测试 (500 样本)
3) 标准测试 (1000 样本)
4) 大规模测试 (5000 样本)
5) 全部样本 (使用完整数据集)
6) 自定义数量

请选择测试规模 (输入数字, 'b'返回): 1
```
**新手推荐：**
- 第一次使用选择 `1) 快速测试` - 2-3分钟完成
- 熟悉后可以选择 `3) 标准测试` - 获得更准确结果

#### 🔸 **步骤6：确认配置并开始测试**
```
配置总结：
设备: cuda:0
模型类型: classification
模型: ResNet18
数据集: MNIST
测试样本数: 100

确认开始测试? (y/n/b-返回设置): y
```

### 测试过程 ⏱️

测试开始后，你会看到：

```
开始分类模型基准测试...
正在使用模型: ResNet18
计划测试样本数: 100
输入数据格式验证中...
输入数据形状: torch.Size([1, 3, 224, 224])
数据类型: torch.float32
数据范围: [-2.118, 2.640]

Processed 10/100 samples (10.0%)... 当前FPS: 156.2
Processed 20/100 samples (20.0%)... 当前FPS: 163.8
...
达到目标样本数 100，测试完成
```

## 数据集使用指南 📦

### 自动下载数据集（推荐新手）

**MNIST和CIFAR-10会自动下载，无需手动操作：**
```bash
# 首次运行时会自动下载到 ./data/ 目录
python benchmark3.py
```

第一次运行时会看到：
```
正在加载MNIST数据集...
Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
...
Done!
```

### 手动下载数据集（高级用户）

#### ImageNet验证集

1. **注册并下载**
   - 访问 https://www.image-net.org/download.php
   - 注册账户获取下载权限

2. **创建目录并下载**
   ```bash
   mkdir -p ./data/imagenet
   # 替换YOUR_DOWNLOAD_URL为实际下载链接
   wget YOUR_DOWNLOAD_URL -O ./data/imagenet/ILSVRC2012_img_val.tar
   cd ./data/imagenet
   tar -xf ILSVRC2012_img_val.tar
   mkdir val
   mv ILSVRC2012_val_*.JPEG val/
   ```

#### COCO数据集

```bash
# 创建目录
mkdir -p ./data/coco
cd ./data/coco

# 下载验证集图像
wget http://images.cocodataset.org/zips/val2017.zip
unzip val2017.zip

# 下载标注文件
wget http://images.cocodataset.org/annotations/annotations_trainval2017.zip
unzip annotations_trainval2017.zip

# 清理下载文件
rm val2017.zip annotations_trainval2017.zip
```

**最终目录结构：**
```
./data/coco/
├── val2017/
│   ├── 000000000139.jpg
│   └── ... (5000个图像)
└── annotations/
    └── instances_val2017.json
```

#### 网络问题解决方案

**使用国内镜像：**
```bash
# 清华镜像下载COCO
wget https://mirrors.tuna.tsinghua.edu.cn/help/coco/val2017.zip -O val2017.zip
unzip val2017.zip -d ./data/coco/
```

**验证下载是否成功：**
```bash
# 检查COCO数据集
ls ./data/coco/val2017/ | wc -l  # 应该显示5000
ls ./data/coco/annotations/instances_val2017.json  # 应该存在

# 检查ImageNet数据集
ls ./data/imagenet/val/ | wc -l  # 应该显示50000
```

## 结果解读 📋

### 控制台结果示例

```
======================================================================
BENCHMARK RESULTS SUMMARY
======================================================================
Model: ResNet18
Dataset: MNIST
Device: cuda:0
Device Name: NVIDIA GeForce RTX 3080

==================== PERFORMANCE METRICS ====================
  Samples processed: 100
  Total time: 1.23s
  Throughput: 81.30 samples/sec
  Avg time/sample: 12.30ms

==================== TIMING BREAKDOWN (ms) ====================
  Preprocessing Times:
    Min: 0.21ms
    Max: 1.45ms
    Avg: 0.34ms ± 0.12

  Inference Times:
    Min: 8.23ms
    Max: 15.67ms
    Avg: 11.96ms ± 1.34

==================== RESOURCE UTILIZATION ====================
  CPU Usage:
    Min: 15.2%
    Max: 45.8%
    Avg: 28.5% ± 8.3

  GPU Memory:
    Min: 12.3%
    Max: 15.7%
    Avg: 14.1% ± 1.2

==================== OVERALL RATING =========================
  Performance Rating: Good 🟡
======================================================================
```

### 性能评级说明

**分类模型FPS评级：**
- 🟢 **Excellent (优秀)**：> 100 FPS
- 🟡 **Good (良好)**：50-100 FPS  
- 🟠 **Fair (一般)**：10-50 FPS
- 🔴 **Slow (较慢)**：< 10 FPS

**检测模型FPS评级：**
- 🟢 **Excellent (优秀)**：> 30 FPS
- 🟡 **Good (良好)**：15-30 FPS
- 🟠 **Fair (一般)**：5-15 FPS  
- 🔴 **Slow (较慢)**：< 5 FPS

### 输出文件说明

测试完成后，会生成以下文件：

```
📁 工作目录/
├── 📄 [主机名]_classification_detailed_[时间戳].csv    # 详细数据（每个样本）
├── 📄 [主机名]_classification_summary_[时间戳].csv     # 汇总统计
├── 📊 [主机名]_classification_summary_[时间戳].png     # 性能总结图
└── 📈 [主机名]_classification_speed_analysis_[时间戳].png  # 速度分析图
```

**文件内容说明：**
- **详细CSV**：包含每个样本的具体时间数据
- **汇总CSV**：包含统计信息和系统配置
- **总结图**：饼图、柱状图等综合分析
- **速度图**：FPS变化曲线和稳定性分析

## 常见问题 ❓

### Q1: 安装时提示"pip不是内部或外部命令"
**A:** Python安装时没有添加到PATH。解决方法：
1. 重新安装Python，勾选"Add Python to PATH"
2. 或手动添加Python路径到系统环境变量

### Q2: 提示CUDA不可用
**A:** 
1. 确认显卡驱动已安装
2. 检查CUDA版本兼容性
3. 可以选择CPU模式继续测试

### Q3: 下载数据集失败
**A:**
1. 检查网络连接
2. 可能需要科学上网
3. 多尝试几次，数据集会自动下载到`./data`文件夹

### Q4: 内存不足错误
**A:**
1. 减少测试样本数量
2. 选择更轻量的模型（如ResNet18）
3. 关闭其他占用内存的程序

### Q5: 测试速度很慢
**A:**
1. 使用GPU而不是CPU
2. 选择较小的模型进行测试
3. 减少测试样本数量

## 使用技巧 💡

### 🔸 **第一次使用建议**
1. 选择CPU + ResNet18 + MNIST + 快速测试(100样本)
2. 熟悉流程后再使用GPU和更大的数据集

### 🔸 **性能比较技巧**
1. 保持其他条件相同，只改变一个变量
2. 多次测试取平均值，减少随机误差
3. 记录测试环境（系统负载、温度等）

### 🔸 **结果分析技巧**
1. 关注FPS和平均时间，这是最重要的指标
2. 查看时间分解，找出性能瓶颈
3. 观察资源使用率，判断是否充分利用硬件

## 故障排除 🔧

如果遇到问题：

1. **检查Python版本**：`python --version`
2. **检查依赖安装**：`pip list`
3. **查看错误日志**：运行时的完整错误信息
4. **重新安装**：删除虚拟环境重新创建

## 进阶使用 🚀

### 自定义模型测试
如果你想测试自己的模型，可以修改代码中的模型定义部分。

### 批量测试
可以写脚本自动运行多个配置，进行批量性能测试。

### 结果可视化
生成的CSV文件可以导入Excel或其他数据分析工具进行进一步分析。

---

## 技术支持 📞

如果你在使用过程中遇到问题：

1. 仔细阅读错误信息
2. 检查系统要求和依赖安装
3. 参考常见问题部分
4. 确保网络连接正常（下载数据集需要）

**享受你的AI性能测试之旅！** 🎉

---
*最后更新：2025年7月*
