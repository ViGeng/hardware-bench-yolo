## üá∫üá∏ English Version


### Version H (09.08.2025-22.08.2025)

- Add state machine to code and UI
- Update generated filename format
- Integrate tqdm-style logging
- Remove speed categories, display FPS only
- Show impact of data monitoring to evaluate accuracy


### Version H (25.07.2025-08.08.2025) - Modular Architecture Edition
#### üèóÔ∏è **Complete Modular Refactoring - Professional Architecture Design**

**Major Architecture Changes:**
- **Complete Modularization**: Split monolithic benchmark6.py into 14 specialized modules
- **Professional Code Organization**: Separated concerns with dedicated modules for each functionality
- **Enhanced Maintainability**: Clean interfaces between modules with proper dependency injection
- **Command Line Interface**: Full CLI support with batch processing capabilities
- **Dual Mode Operation**: Both interactive and non-interactive execution modes

**New Module Structure:**
- **main.py**: Entry point and orchestration with BenchmarkManager class
- **cli.py**: Command line interface with comprehensive argument parsing
- **interactive.py**: Interactive UI with enhanced navigation and state management
- **models.py**: Model loading and management with unified interfaces
- **datasets.py**: Data loading with custom dataset classes and transformations
- **benchmarks.py**: Core benchmark execution logic with BenchmarkRunner class
- **rendering.py**: Visualization rendering engine with multi-backend support
- **monitoring.py**: System resource monitoring with improved GPU detection
- **output.py**: Result export and visualization generation
- **config.py**: Configuration management with centralized settings
- **utils.py**: Utility functions and system information gathering

**Enhanced Features:**
- **Automatic Dependency Management**: Smart dependency detection with silent fallbacks
- **Improved Error Handling**: Robust error recovery with detailed logging
- **PATH Auto-fixing**: Automatic NVIDIA driver path resolution on Windows
- **Batch Processing**: Support for automated testing workflows
- **Flexible Output**: Configurable result directories and formats
- **Enhanced Logging**: Module-level logging with detailed operation tracking

**Command Line Capabilities:**
```bash
# List available models and datasets
python main.py --list-models
python main.py --list-datasets

# Run specific benchmarks
python main.py --device cuda:0 --model-type classification --model resnet18 --dataset MNIST --samples 100
python main.py --device cpu --model-type detection --model yolov8n --dataset Test-Images --samples 500

# Batch mode with custom output
python main.py --device auto --model-type segmentation --model unet_resnet34 --dataset Synthetic-Segmentation --samples 200 --output-dir ./results --quiet


---


### Version G (18.07.2025-25.07.2025) - benchmark6.py
#### üé® **Rendering Engine Edition - Complete Visualization Pipeline**

**New Features:**
- **RenderingEngine Class**: Complete visualization system for all model types
- **Five-Stage Timing Measurement**: Preprocessing ‚Üí Inference ‚Üí Postprocessing ‚Üí **Rendering** ‚Üí Total
- **Classification Rendering**: Top-K predictions with confidence scores and ImageNet class names
- **Detection Rendering**: Bounding boxes, confidence scores, class labels with COCO 80-class support
- **Segmentation Rendering**: Colored mask overlay with 19-class Cityscapes color mapping and legend
- **Multi-Backend Support**: PIL and OpenCV dual rendering backends
- **Enhanced Visualizations**: Time breakdown stacking plots showing all 5 stages

**Technical Improvements:**
- Graceful degradation when rendering fails
- Preset data for COCO (80 classes), ImageNet (1000 classes), Cityscapes (19 classes)
- Professional color schemes for visualization
- Complete pipeline monitoring from input to final visualization
- Auto-fallback rendering system

---

### Version F (11.07.2025-18.07.2025) - benchmark5.py
#### üìù **Logging System Edition - Complete Tracking and Recording**

**New Features:**
- **Complete Logging System**: All operations with detailed timestamps
- **Dual Output**: Simultaneous file and console logging with UTF-8 encoding
- **Hierarchical Logging**: INFO, WARNING, ERROR level classification
- **Auto-naming**: hostname_benchmark_log_timestamp.log format
- **Chinese Content Support**: Full internationalization

**Logging Coverage:**
- Initialization phase: Tool startup, dependency checks
- Configuration phase: Device, model, dataset selection tracking
- Data loading: Dataset loading status and statistics
- Model loading: Model type and loading status verification
- Test execution: Processing progress, FPS metrics, error messages
- Output generation: File saving status, visualization generation tracking

**Enhanced State Tracking:**
- Detailed progress recording every 10 samples
- Real-time performance metrics logging
- Error recovery process documentation
- Complete file operation tracking

---

### Version E (11.07.2025-18.07.2025) - benchmark4.py
#### üöó **Multi-Task Extension - Semantic Segmentation and New Datasets**

**Major Extensions:**
- **Semantic Segmentation Mode**: Third complete task type added
- **KITTI Dataset Support**: Autonomous driving scenario object detection
- **Cityscapes Dataset**: Urban scene semantic segmentation with 19-class support
- **Enhanced Model Architecture Support**: Torchvision detection + segmentation models

**New Models Added:**
- **Torchvision Detection Models**: Faster R-CNN (ResNet50/MobileNet), FCOS ResNet50
- **Segmentation Models**: DeepLabV3+, UNet/UNet++, PSPNet, FPN with multiple encoders
- **Multiple Encoders**: ResNet34/50, EfficientNet-B0 backbone support

**Dataset Processing Enhancements:**
- Custom dataset classes: KITTIDataset, CityscapesDataset
- Auto-degradation: Synthetic data generation when real data unavailable
- Multi-resolution support: Native size adaptation for different datasets
- Improved data preprocessing pipelines

**Technical Improvements:**
- Better dependency management with installation suggestions
- Model loading optimization with deprecated warning fixes
- Memory management improvements
- Enhanced error handling with detailed stack traces

---

### Version D (04.07.2025-11.07.2025) - benchmark3.py
#### üîÑ **User Experience Enhancement - Navigation and Data Processing Optimization**

**User Experience Improvements:**
- **Back Navigation System**: All selection steps support 'b'/'back' to return to previous step
- **State Machine Navigation**: Complete setup flow state management with persistent state
- **Custom Sample Count Options**: Fast(100), Medium(500), Standard(1000), Large(5000), All samples, Custom input
- **Interactive Flow Control**: Seamless navigation between configuration steps

**Data Processing Fixes:**
- **MNIST Channel Conversion Fix**: Proper 1-channel to 3-channel conversion (28x28 ‚Üí 224x224)
- **CIFAR-10 Resize Fix**: Correct image resizing (32x32 ‚Üí 224x224)
- **ImageNet Standardization**: Unified preprocessing pipeline across all models
- **Memory-efficient Processing**: Optimized tensor operations

**Visualization Enhancements:**
- **Detailed Speed Analysis**: Per-frame FPS analysis with line plots
- **Performance Stability Analysis**: Moving averages and standard deviation calculations
- **Time Distribution Histograms**: Processing time distribution statistics
- **Performance Benchmark Lines**: Reference performance levels in visualizations

**Output Improvements:**
- **Dual CSV Export**: Detailed per-sample results + summary statistics
- **Complete Statistical Data**: Min, max, average, standard deviation for all metrics
- **Multi-chart Generation**: Summary overview + detailed analysis charts
- **Enhanced Metadata**: Complete system and configuration information

---

### Version C (04.07.2025-11.07.2025) - benchmark2.py
#### ü§ñ **Interactive Multi-Model Edition - Model Type Extension**

**Major Updates:**
- **Interactive User Interface**: Complete interactive setup flow replacing command-line parameters
- **Multi-Model Type Support**: Image Classification + Object Detection tasks
- **Multi-Dataset Support**: MNIST, CIFAR-10, ImageNet samples, COCO detection, synthetic test images
- **Advanced Visualization**: matplotlib chart generation with seaborn styling

**New Models Added:**
- **Classification Models (timm)**: ResNet18/50, EfficientNet-B0/B3, Vision Transformer, MobileNet-V3
- **Detection Models**: YOLOv8n/s/m variants via ultralytics
- **Pretrained Weights**: Automatic download and loading of pretrained models

**Enhanced Features:**
- **Synthetic Dataset Generation**: Automatic fallback when real datasets unavailable
- **System Information Collection**: Complete hardware and software configuration logging
- **Detailed CSV Output**: Per-sample timing breakdown with statistical analysis
- **Performance Rating System**: Automatic FPS-based performance classification
- **Dependency Management**: Startup verification with helpful installation guidance

**Technical Improvements:**
- Modular architecture for easy model addition
- Improved error handling and user feedback
- Memory-efficient batch processing
- Cross-platform compatibility enhancements

---

### Version B (27.06.2025-08.07.2025) - benchmark1.py
#### ‚öôÔ∏è **Command Line Enhanced Edition - Parameterized Configuration**

**New Features:**
- **Comprehensive CLI Arguments**: Complete parameterization eliminating code modification needs
- **Multiple Output Formats**: Native support for txt, json, csv export formats
- **Intelligent Device Detection**: Automatic optimal device selection with fallback mechanisms
- **Progress Monitoring**: Real-time progress display every 10 frames with instant FPS calculation
- **Detection Visualization**: Optional per-frame object detection results display
- **Flexible Configuration**: Batch size, frame limits, and processing parameters

**Command Line Interface:**
```bash
--model/-m: Model path specification
--source/-s: Video source or camera input
--device/-d: Runtime device selection (auto/cpu/cuda)
--batch-size/-b: Processing batch size
--max-frames/-f: Maximum frame processing limit
--output-format/-o: Export format selection
--verbose/-v: Detailed information display
--show-detections: Enable detection result display
--show-progress: Enable progress monitoring
```

**Improvements:**
- **Enhanced Error Handling**: Comprehensive exception catching and user-friendly error messages
- **Bilingual Support**: Chinese interface and documentation
- **Automatic Validation**: Input validation and device capability checking
- **Performance Metrics**: Cumulative and instantaneous FPS calculations
- **Flexible I/O**: Support for various input sources and output destinations

---

### Version A (27.06.2025-08.07.20255) - benchmark.py
#### üèÅ **Initial Version - Basic YOLO Benchmark Tool**

**Core Features:**
- **YOLOv8 Performance Benchmarking**: Foundation implementation for object detection evaluation
- **Video Processing Pipeline**: Support for video file input (bolt-detection.mp4)
- **Three-Stage Timing Analysis**: Preprocessing, Inference, Postprocessing time measurement
- **System Resource Monitoring**: Real-time CPU usage, memory consumption, GPU utilization tracking
- **Cross-Platform Device Support**: CUDA GPU and CPU processing compatibility
- **Statistical Analysis**: Min, max, average calculations for all performance metrics
- **Results Export**: Automatic saving to hostname.txt with formatted output
- **Real-time Display**: Console output with live performance statistics

**Technical Foundation:**
- **ultralytics Framework**: Core YOLO model implementation
- **pynvml Integration**: NVIDIA GPU monitoring capabilities
- **psutil System Monitoring**: Cross-platform system resource tracking
- **Multi-threaded Architecture**: Separate thread for resource monitoring
- **numpy Statistical Computing**: Efficient numerical calculations

**Performance Metrics:**
- Frame processing rate (FPS)
- Per-stage timing breakdown
- Resource utilization patterns
- Memory usage optimization
- GPU efficiency analysis

---

## üá®üá≥ ‰∏≠ÊñáÁâàÊú¨

### I Áâà (09.08.2025-22.08.2025)

-Ê∑ªÂä†Áä∂ÊÄÅÊú∫Âú®‰ª£Á†ÅÂíåÁî®Êà∑‰∫§‰∫íÁïåÈù¢
-‰øÆÊîπÁîüÊàêÁöÑÊñá‰ª∂ÂêçÊ†ºÂºè
-‰ΩøÁî®tqdmÊó•ÂøóÂΩ¢Âºè
-ÂèñÊ∂àÊµãËØïÈÄüÂ∫¶ÁöÑÂø´ÊÖ¢ÂÆö‰πâÔºåÂè™ÊòæÁ§∫FPSÊï∞ÂÄº
-Â¢ûÂä†ÊòæÁ§∫Êï∞ÊçÆÁõëÊéßÂ∏¶Êù•ÁöÑÂΩ±ÂìçÔºåÂèØ‰ª•‰∫ÜËß£ÁõëÊµãÁöÑÂáÜÁ°ÆÂ∫¶



### H Áâà (25.07.2025-08.08.2025) - Ê®°ÂùóÂåñÊû∂ÊûÑÁâà
#### üèóÔ∏è **ÂÖ®Èù¢Ê®°ÂùóÂåñÈáçÊûÑ - ‰∏ì‰∏öÊû∂ÊûÑËÆæËÆ°**

**‰∏ªË¶ÅÊû∂ÊûÑÂèòÊõ¥Ôºö**
- **ÂÖ®Èù¢Ê®°ÂùóÂåñ**ÔºöÂ∞ÜÂçï‰Ωì benchmark6.py ÊãÜÂàÜ‰∏∫ 14 ‰∏™‰∏ìÁî®Ê®°Âùó
- **‰∏ì‰∏ö‰ª£Á†ÅÁªÑÁªá**ÔºöÂ∞ÜÂÖ≥Ê≥®ÁÇπÂàÜÁ¶ªÔºåÊØè‰∏™ÂäüËÉΩÈÉΩÊúâ‰∏ìÁî®Ê®°Âùó
- **Â¢ûÂº∫ÂèØÁª¥Êä§ÊÄß**ÔºöÈÄöËøáÈÄÇÂΩìÁöÑ‰æùËµñÊ≥®ÂÖ•ÔºåÊ∏ÖÊô∞Âú∞ÂÆûÁé∞Ê®°Âùó‰πãÈó¥ÁöÑÊé•Âè£
- **ÂëΩ‰ª§Ë°åÁïåÈù¢**ÔºöÂÖ®Èù¢ÊîØÊåÅ CLIÔºåÂπ∂ÂÖ∑Â§áÊâπÂ§ÑÁêÜÂäüËÉΩ
- **ÂèåÊ®°ÂºèËøêË°å**ÔºöÊîØÊåÅ‰∫§‰∫íÂºèÂíåÈùû‰∫§‰∫íÂºèÊâßË°åÊ®°Âºè

**ÂÖ®Êñ∞Ê®°ÂùóÁªìÊûÑÔºö**
- **main.py**ÔºöÂÖ•Âè£ÁÇπÔºåÂπ∂ÂåÖÂê´ BenchmarkManager Á±ª
- **cli.py**ÔºöÂÖ∑ÊúâÂÖ®Èù¢ÂèÇÊï∞Ëß£ÊûêÂäüËÉΩÁöÑÂëΩ‰ª§Ë°åÁïåÈù¢
- **interactive.py**ÔºöÂ¢ûÂº∫ÂØºËà™ÂíåÁä∂ÊÄÅÁÆ°ÁêÜÁöÑ‰∫§‰∫íÂºèÁî®Êà∑ÁïåÈù¢
- **models.py**Ôºö‰ΩøÁî®Áªü‰∏ÄÁïåÈù¢ÁöÑÊ®°ÂûãÂä†ËΩΩÂíåÁÆ°ÁêÜ
- **datasets.py**Ôºö‰ΩøÁî®Ëá™ÂÆö‰πâÊï∞ÊçÆÈõÜÁ±ªÂíåËΩ¨Êç¢ËøõË°åÊï∞ÊçÆÂä†ËΩΩ
- **benchmarks.py**Ôºö‰ΩøÁî® BenchmarkRunner Á±ªÂÆûÁé∞Ê†∏ÂøÉÂü∫ÂáÜÊµãËØïÊâßË°åÈÄªËæë
- **rendering.py**ÔºöÊîØÊåÅÂ§öÂêéÁ´ØÁöÑÂèØËßÜÂåñÊ∏≤ÊüìÂºïÊìé
- **monitoring.py**Ôºö‰ΩøÁî®ÊîπËøõÁöÑ GPU Ê£ÄÊµãÂäüËÉΩËøõË°åÁ≥ªÁªüËµÑÊ∫êÁõëÊéß
- **output.py**ÔºöÁªìÊûúÂØºÂá∫ÂíåÂèØËßÜÂåñÁîüÊàê
- **config.py**Ôºö‰ΩøÁî®ÈõÜ‰∏≠ËÆæÁΩÆÁöÑÈÖçÁΩÆÁÆ°ÁêÜ
- **utils.py**ÔºöÂÆûÁî®ÂáΩÊï∞ÂíåÁ≥ªÁªü‰ø°ÊÅØÊî∂ÈõÜ

**Â¢ûÂº∫ÂäüËÉΩÔºö**
- **Ëá™Âä®‰æùËµñÁÆ°ÁêÜ**ÔºöÊô∫ËÉΩ‰æùËµñÊ£ÄÊµãÔºåÊîØÊåÅÈùôÈªòÂõûÈÄÄ
- **ÊîπËøõÁöÑÈîôËØØÂ§ÑÁêÜ**ÔºöÂº∫Â§ßÁöÑÈîôËØØÊÅ¢Â§çÂäüËÉΩÔºåÊèê‰æõËØ¶ÁªÜÁöÑÊó•ÂøóËÆ∞ÂΩï
- **PATH Ëá™Âä®‰øÆÂ§ç**ÔºöÂú® Windows ‰∏äËá™Âä®Ëß£Êûê NVIDIA È©±Âä®Á®ãÂ∫èË∑ØÂæÑ
- **ÊâπÂ§ÑÁêÜ**ÔºöÊîØÊåÅËá™Âä®ÂåñÊµãËØïÂ∑•‰ΩúÊµÅÁ®ã
- **ÁÅµÊ¥ªÁöÑËæìÂá∫**ÔºöÂèØÈÖçÁΩÆÁöÑÁªìÊûúÁõÆÂΩïÂíåÊ†ºÂºè
- **Â¢ûÂº∫Êó•ÂøóËÆ∞ÂΩï**ÔºöÊ®°ÂùóÁ∫ßÊó•ÂøóËÆ∞ÂΩïÔºåÊèê‰æõËØ¶ÁªÜÁöÑÊìç‰ΩúË∑üË∏™

**ÂëΩ‰ª§Ë°åÂäüËÉΩ**
```bash
# ÂàóÂá∫ÂèØÁî®ÁöÑÊ®°ÂûãÂíåÊï∞ÊçÆÈõÜ
python main.py --list-models
python main.py --list-datasets

# ËøêË°åÁâπÂÆöÁöÑÂü∫ÂáÜÊµãËØï
python main.py --device cuda:0 --model-type classified --model resnet18 --dataset MNIST --samples 100
python main.py --device cpu --model-typedetection --model yolov8n --dataset Test-Images --samples 500

# ÊâπÂ§ÑÁêÜÊ®°ÂºèÔºåÂèØËá™ÂÆö‰πâËæìÂá∫
python main.py --device auto --model-typesegmentation --model unet_resnet34 --dataset Synthetic-Segmentation --samples 200 --output-dir ./results --quiet


---


### ÁâàÊú¨ G (18.07.2025-25.07.2025) - benchmark6.py
#### üé® **Ê∏≤ÊüìÂºïÊìéÁâà - ÂÆåÊï¥ÂèØËßÜÂåñÊµÅÊ∞¥Á∫ø**

**Êñ∞ÂäüËÉΩÔºö**
- **Ê∏≤ÊüìÂºïÊìéÁ±ª**ÔºöÈíàÂØπÊâÄÊúâÊ®°ÂûãÁ±ªÂûãÁöÑÂÆåÊï¥ÂèØËßÜÂåñÁ≥ªÁªü
- **‰∫îÈò∂ÊÆµÊó∂Èó¥ÊµãÈáè**ÔºöÈ¢ÑÂ§ÑÁêÜ ‚Üí Êé®ÁêÜ ‚Üí ÂêéÂ§ÑÁêÜ ‚Üí **Ê∏≤Êüì** ‚Üí ÊÄªËÆ°
- **ÂàÜÁ±ªÁªìÊûúÊ∏≤Êüì**ÔºöTop-KÈ¢ÑÊµãÁªìÊûúÔºåÂåÖÂê´ÁΩÆ‰ø°Â∫¶ÂíåImageNetÁ±ªÂà´ÂêçÁß∞
- **Ê£ÄÊµãÁªìÊûúÊ∏≤Êüì**ÔºöËæπÁïåÊ°Ü„ÄÅÁΩÆ‰ø°Â∫¶„ÄÅÁ±ªÂà´Ê†áÁ≠æÔºåÊîØÊåÅCOCO 80Á±ª
- **ÂàÜÂâ≤ÁªìÊûúÊ∏≤Êüì**ÔºöÂΩ©Ëâ≤maskÂè†Âä†Ôºå19Á±ªCityscapesÈ¢úËâ≤Êò†Â∞ÑÂíåÂõæ‰æã
- **Â§öÂêéÁ´ØÊîØÊåÅ**ÔºöPILÂíåOpenCVÂèåÊ∏≤ÊüìÂêéÁ´Ø
- **Â¢ûÂº∫ÂèØËßÜÂåñ**ÔºöÊòæÁ§∫ÂÖ®ÈÉ®5‰∏™Èò∂ÊÆµÁöÑÊó∂Èó¥ÂàÜËß£Â†ÜÂè†Âõæ

**ÊäÄÊúØÊîπËøõÔºö**
- Ê∏≤ÊüìÂ§±Ë¥•Êó∂ÁöÑ‰ºòÈõÖÈôçÁ∫ßÂ§ÑÁêÜ
- COCO(80Á±ª)„ÄÅImageNet(1000Á±ª)„ÄÅCityscapes(19Á±ª)È¢ÑËÆæÊï∞ÊçÆ
- ‰∏ì‰∏öÁöÑÂèØËßÜÂåñÈÖçËâ≤ÊñπÊ°à
- ‰ªéËæìÂÖ•Âà∞ÊúÄÁªàÂèØËßÜÂåñÁöÑÂÆåÊï¥ÊµÅÊ∞¥Á∫øÁõëÊéß
- Ëá™Âä®Â§áÁî®Ê∏≤ÊüìÁ≥ªÁªü

---

### ÁâàÊú¨ F (11.07.2025-18.07.2025) - benchmark5.py
#### üìù **Êó•ÂøóÁ≥ªÁªüÁâà - ÂÆåÊï¥ËøΩË∏™ÂíåËÆ∞ÂΩï**

**Êñ∞ÂäüËÉΩÔºö**
- **ÂÆåÊï¥Êó•ÂøóÁ≥ªÁªü**ÔºöÊâÄÊúâÊìç‰ΩúÈÉΩÊúâËØ¶ÁªÜÊó∂Èó¥Êà≥ËÆ∞ÂΩï
- **ÂèåÈáçËæìÂá∫**ÔºöÂêåÊó∂Êñá‰ª∂ÂíåÊéßÂà∂Âè∞Êó•ÂøóËæìÂá∫ÔºåÊîØÊåÅUTF-8ÁºñÁ†Å
- **ÂàÜÁ∫ßÊó•Âøó**ÔºöINFO„ÄÅWARNING„ÄÅERRORÁ≠âÁ∫ßÂàÜÁ±ª
- **Ëá™Âä®ÂëΩÂêç**Ôºöhostname_benchmark_log_timestamp.logÊ†ºÂºè

**Êó•ÂøóË¶ÜÁõñËåÉÂõ¥Ôºö**
- ÂàùÂßãÂåñÈò∂ÊÆµÔºöÂ∑•ÂÖ∑ÂêØÂä®„ÄÅ‰æùËµñÊ£ÄÊü•
- ÈÖçÁΩÆÈò∂ÊÆµÔºöËÆæÂ§á„ÄÅÊ®°Âûã„ÄÅÊï∞ÊçÆÈõÜÈÄâÊã©ËøΩË∏™
- Êï∞ÊçÆÂä†ËΩΩÔºöÊï∞ÊçÆÈõÜÂä†ËΩΩÁä∂ÊÄÅÂíåÁªüËÆ°‰ø°ÊÅØ
- Ê®°ÂûãÂä†ËΩΩÔºöÊ®°ÂûãÁ±ªÂûãÂíåÂä†ËΩΩÁä∂ÊÄÅÈ™åËØÅ
- ÊµãËØïÊâßË°åÔºöÂ§ÑÁêÜËøõÂ∫¶„ÄÅFPSÊåáÊ†á„ÄÅÈîôËØØÊ∂àÊÅØ
- ËæìÂá∫ÁîüÊàêÔºöÊñá‰ª∂‰øùÂ≠òÁä∂ÊÄÅ„ÄÅÂèØËßÜÂåñÁîüÊàêËøΩË∏™

**Â¢ûÂº∫Áä∂ÊÄÅËøΩË∏™Ôºö**
- ÊØè10‰∏™Ê†∑Êú¨ÁöÑËØ¶ÁªÜËøõÂ∫¶ËÆ∞ÂΩï
- ÂÆûÊó∂ÊÄßËÉΩÊåáÊ†áÊó•ÂøóËÆ∞ÂΩï
- ÈîôËØØÊÅ¢Â§çËøáÁ®ãÊñáÊ°£Âåñ
- ÂÆåÊï¥ÁöÑÊñá‰ª∂Êìç‰ΩúËøΩË∏™

---

### ÁâàÊú¨ E (11.07.2025-18.07.2025) - benchmark4.py
#### üöó **Â§ö‰ªªÂä°Êâ©Â±ïÁâà - ËØ≠‰πâÂàÜÂâ≤ÂíåÊñ∞Êï∞ÊçÆÈõÜ**

**ÈáçÂ§ßÊâ©Â±ïÔºö**
- **ËØ≠‰πâÂàÜÂâ≤Ê®°Âºè**ÔºöÊñ∞Â¢ûÂÆåÊï¥ÁöÑÁ¨¨‰∏âÁßç‰ªªÂä°Á±ªÂûã
- **KITTIÊï∞ÊçÆÈõÜÊîØÊåÅ**ÔºöËá™Âä®È©æÈ©∂Âú∫ÊôØÁõÆÊ†áÊ£ÄÊµã
- **CityscapesÊï∞ÊçÆÈõÜ**ÔºöÂüéÂ∏ÇË°óÊôØËØ≠‰πâÂàÜÂâ≤ÔºåÊîØÊåÅ19Á±ª
- **Â¢ûÂº∫Ê®°ÂûãÊû∂ÊûÑÊîØÊåÅ**ÔºöTorchvisionÊ£ÄÊµãÊ®°Âûã + ÂàÜÂâ≤Ê®°Âûã

**Êñ∞Â¢ûÊ®°ÂûãÔºö**
- **TorchvisionÊ£ÄÊµãÊ®°Âûã**ÔºöFaster R-CNN (ResNet50/MobileNet)„ÄÅFCOS ResNet50
- **ÂàÜÂâ≤Ê®°Âûã**ÔºöDeepLabV3+„ÄÅUNet/UNet++„ÄÅPSPNet„ÄÅFPNÔºåÊîØÊåÅÂ§öÁßçÁºñÁ†ÅÂô®
- **Â§öÁßçÁºñÁ†ÅÂô®**ÔºöResNet34/50„ÄÅEfficientNet-B0È™®Âπ≤ÁΩëÁªúÊîØÊåÅ

**Êï∞ÊçÆÈõÜÂ§ÑÁêÜÂ¢ûÂº∫Ôºö**
- Ëá™ÂÆö‰πâÊï∞ÊçÆÈõÜÁ±ªÔºöKITTIDataset„ÄÅCityscapesDataset
- Ëá™Âä®ÈôçÁ∫ßÔºöÁúüÂÆûÊï∞ÊçÆ‰∏çÂèØÁî®Êó∂ÁîüÊàêÂêàÊàêÊï∞ÊçÆ
- Â§öÂàÜËæ®ÁéáÊîØÊåÅÔºöÈÄÇÈÖç‰∏çÂêåÊï∞ÊçÆÈõÜÁöÑÂéüÁîüÂ∞∫ÂØ∏
- ÊîπËøõÁöÑÊï∞ÊçÆÈ¢ÑÂ§ÑÁêÜÊµÅÊ∞¥Á∫ø

**ÊäÄÊúØÊîπËøõÔºö**
- Êõ¥Â•ΩÁöÑ‰æùËµñÁÆ°ÁêÜÔºåÊèê‰æõÂÆâË£ÖÂª∫ËÆÆ
- Ê®°ÂûãÂä†ËΩΩ‰ºòÂåñÔºå‰øÆÂ§çÂºÉÁî®Ë≠¶Âëä
- ÂÜÖÂ≠òÁÆ°ÁêÜÊîπËøõ
- Â¢ûÂº∫ÁöÑÈîôËØØÂ§ÑÁêÜÔºåÂåÖÂê´ËØ¶ÁªÜÁöÑÂ†ÜÊ†àË∑üË∏™

---

### ÁâàÊú¨ D (04.07.2025-11.07.2025) - benchmark3.py
#### üîÑ **Áî®Êà∑‰ΩìÈ™åÂ¢ûÂº∫Áâà - ÂØºËà™ÂíåÊï∞ÊçÆÂ§ÑÁêÜ‰ºòÂåñ**

**Áî®Êà∑‰ΩìÈ™åÊîπËøõÔºö**
- **ËøîÂõûÂØºËà™Á≥ªÁªü**ÔºöÊâÄÊúâÈÄâÊã©Ê≠•È™§ÊîØÊåÅ'b'/'back'ËøîÂõû‰∏ä‰∏ÄÊ≠•
- **Áä∂ÊÄÅÊú∫ÂØºËà™**ÔºöÂÆåÊï¥ÁöÑËÆæÁΩÆÊµÅÁ®ãÁä∂ÊÄÅÁÆ°ÁêÜÔºåÊåÅ‰πÖÂåñÁä∂ÊÄÅ
- **Ëá™ÂÆö‰πâÊ†∑Êú¨Êï∞ÈáèÈÄâÈ°π**ÔºöÂø´ÈÄü(100)„ÄÅ‰∏≠Á≠â(500)„ÄÅÊ†áÂáÜ(1000)„ÄÅÂ§ßËßÑÊ®°(5000)„ÄÅÂÖ®ÈÉ®Ê†∑Êú¨„ÄÅËá™ÂÆö‰πâËæìÂÖ•
- **‰∫§‰∫íÂºèÊµÅÁ®ãÊéßÂà∂**ÔºöÈÖçÁΩÆÊ≠•È™§Èó¥ÁöÑÊó†ÁºùÂØºËà™

**Êï∞ÊçÆÂ§ÑÁêÜ‰øÆÂ§çÔºö**
- **MNISTÈÄöÈÅìËΩ¨Êç¢‰øÆÂ§ç**ÔºöÊ≠£Á°ÆÁöÑ1ÈÄöÈÅìÂà∞3ÈÄöÈÅìËΩ¨Êç¢ (28x28 ‚Üí 224x224)
- **CIFAR-10Â∞∫ÂØ∏‰øÆÂ§ç**ÔºöÊ≠£Á°ÆÁöÑÂõæÂÉèÂ∞∫ÂØ∏Ë∞ÉÊï¥ (32x32 ‚Üí 224x224)
- **ImageNetÊ†áÂáÜÂåñ**ÔºöÊâÄÊúâÊ®°ÂûãÁªü‰∏ÄÁöÑÈ¢ÑÂ§ÑÁêÜÊµÅÊ∞¥Á∫ø
- **ÂÜÖÂ≠òÈ´òÊïàÂ§ÑÁêÜ**Ôºö‰ºòÂåñÁöÑÂº†ÈáèÊìç‰Ωú

**ÂèØËßÜÂåñÂ¢ûÂº∫Ôºö**
- **ËØ¶ÁªÜÈÄüÂ∫¶ÂàÜÊûê**ÔºöÊØèÂ∏ßFPSÂàÜÊûêÊäòÁ∫øÂõæ
- **ÊÄßËÉΩÁ®≥ÂÆöÊÄßÂàÜÊûê**ÔºöÁßªÂä®Âπ≥ÂùáÂíåÊ†áÂáÜÂ∑ÆËÆ°ÁÆó
- **Êó∂Èó¥ÂàÜÂ∏ÉÁõ¥ÊñπÂõæ**ÔºöÂ§ÑÁêÜÊó∂Èó¥ÂàÜÂ∏ÉÁªüËÆ°
- **ÊÄßËÉΩÂü∫ÂáÜÁ∫ø**ÔºöÂèØËßÜÂåñ‰∏≠ÁöÑÂèÇËÄÉÊÄßËÉΩÊ∞¥Âπ≥

**ËæìÂá∫ÊîπËøõÔºö**
- **ÂèåCSVÂØºÂá∫**ÔºöËØ¶ÁªÜÁöÑÊØèÊ†∑Êú¨ÁªìÊûú + Ê±áÊÄªÁªüËÆ°
- **ÂÆåÊï¥ÁªüËÆ°Êï∞ÊçÆ**ÔºöÊâÄÊúâÊåáÊ†áÁöÑÊúÄÂ∞èÂÄº„ÄÅÊúÄÂ§ßÂÄº„ÄÅÂπ≥ÂùáÂÄº„ÄÅÊ†áÂáÜÂ∑Æ
- **Â§öÂõæË°®ÁîüÊàê**ÔºöÊÄªÁªìÊ¶ÇËßà + ËØ¶ÁªÜÂàÜÊûêÂõæË°®
- **Â¢ûÂº∫ÂÖÉÊï∞ÊçÆ**ÔºöÂÆåÊï¥ÁöÑÁ≥ªÁªüÂíåÈÖçÁΩÆ‰ø°ÊÅØ

---

### ÁâàÊú¨ C (04.07.2025-11.07.2025) - benchmark2.py
#### ü§ñ **‰∫§‰∫íÂºèÂ§öÊ®°ÂûãÁâà - Ê®°ÂûãÁ±ªÂûãÊâ©Â±ï**

**ÈáçÂ§ßÊõ¥Êñ∞Ôºö**
- **‰∫§‰∫íÂºèÁî®Êà∑ÁïåÈù¢**ÔºöÂÆåÂÖ®‰∫§‰∫íÂºèËÆæÁΩÆÊµÅÁ®ãÔºåÊõø‰ª£ÂëΩ‰ª§Ë°åÂèÇÊï∞
- **Â§öÊ®°ÂûãÁ±ªÂûãÊîØÊåÅ**ÔºöÂõæÂÉèÂàÜÁ±ª + ÁõÆÊ†áÊ£ÄÊµã‰ªªÂä°
- **Â§öÊï∞ÊçÆÈõÜÊîØÊåÅ**ÔºöMNIST„ÄÅCIFAR-10„ÄÅImageNetÊ†∑Êú¨„ÄÅCOCOÊ£ÄÊµã„ÄÅÂêàÊàêÊµãËØïÂõæÂÉè
- **È´òÁ∫ßÂèØËßÜÂåñ**ÔºömatplotlibÂõæË°®ÁîüÊàêÔºå‰ΩøÁî®seabornÊ†∑Âºè

**Êñ∞Â¢ûÊ®°ÂûãÔºö**
- **ÂàÜÁ±ªÊ®°Âûã (timm)**ÔºöResNet18/50„ÄÅEfficientNet-B0/B3„ÄÅVision Transformer„ÄÅMobileNet-V3
- **Ê£ÄÊµãÊ®°Âûã**ÔºöÈÄöËøáultralyticsÁöÑYOLOv8n/s/mÂèò‰Ωì
- **È¢ÑËÆ≠ÁªÉÊùÉÈáç**ÔºöËá™Âä®‰∏ãËΩΩÂíåÂä†ËΩΩÈ¢ÑËÆ≠ÁªÉÊ®°Âûã

**Â¢ûÂº∫ÂäüËÉΩÔºö**
- **ÂêàÊàêÊï∞ÊçÆÈõÜÁîüÊàê**ÔºöÁúüÂÆûÊï∞ÊçÆÈõÜ‰∏çÂèØÁî®Êó∂ÁöÑËá™Âä®ÂõûÈÄÄ
- **Á≥ªÁªü‰ø°ÊÅØÊî∂ÈõÜ**ÔºöÂÆåÊï¥ÁöÑÁ°¨‰ª∂ÂíåËΩØ‰ª∂ÈÖçÁΩÆÊó•ÂøóËÆ∞ÂΩï
- **ËØ¶ÁªÜCSVËæìÂá∫**ÔºöÊØèÊ†∑Êú¨Êó∂Èó¥ÂàÜËß£ÂíåÁªüËÆ°ÂàÜÊûê
- **ÊÄßËÉΩËØÑÁ∫ßÁ≥ªÁªü**ÔºöÂü∫‰∫éFPSÁöÑËá™Âä®ÊÄßËÉΩÂàÜÁ±ª
- **‰æùËµñÁÆ°ÁêÜ**ÔºöÂêØÂä®È™åËØÅÔºåÊèê‰æõÊúâÁî®ÁöÑÂÆâË£ÖÊåáÂØº

**ÊäÄÊúØÊîπËøõÔºö**
- ‰æø‰∫éÊ∑ªÂä†Ê®°ÂûãÁöÑÊ®°ÂùóÂåñÊû∂ÊûÑ
- ÊîπËøõÁöÑÈîôËØØÂ§ÑÁêÜÂíåÁî®Êà∑ÂèçÈ¶à
- ÂÜÖÂ≠òÈ´òÊïàÁöÑÊâπÂ§ÑÁêÜ
- Ë∑®Âπ≥Âè∞ÂÖºÂÆπÊÄßÂ¢ûÂº∫

---

### ÁâàÊú¨ B (27.06.2025-08.07.2025) - benchmark1.py
#### ‚öôÔ∏è **ÂëΩ‰ª§Ë°åÂ¢ûÂº∫Áâà - ÂèÇÊï∞ÂåñÈÖçÁΩÆ**

**Êñ∞ÂäüËÉΩÔºö**
- **ÂÖ®Èù¢ÁöÑCLIÂèÇÊï∞**ÔºöÂÆåÊï¥ÂèÇÊï∞ÂåñÔºåÊó†ÈúÄ‰øÆÊîπ‰ª£Á†Å
- **Â§öÁßçËæìÂá∫Ê†ºÂºè**ÔºöÂéüÁîüÊîØÊåÅtxt„ÄÅjson„ÄÅcsvÂØºÂá∫Ê†ºÂºè
- **Êô∫ËÉΩËÆæÂ§áÊ£ÄÊµã**ÔºöÂÖ∑ÊúâÂõûÈÄÄÊú∫Âà∂ÁöÑËá™Âä®ÊúÄ‰ºòËÆæÂ§áÈÄâÊã©
- **ËøõÂ∫¶ÁõëÊéß**ÔºöÊØè10Â∏ßÂÆûÊó∂ËøõÂ∫¶ÊòæÁ§∫ÔºåÂåÖÂê´Áû¨Êó∂FPSËÆ°ÁÆó
- **Ê£ÄÊµãÂèØËßÜÂåñ**ÔºöÂèØÈÄâÁöÑÊØèÂ∏ßÁõÆÊ†áÊ£ÄÊµãÁªìÊûúÊòæÁ§∫
- **ÁÅµÊ¥ªÈÖçÁΩÆ**ÔºöÊâπÊ¨°Â§ßÂ∞è„ÄÅÂ∏ßÈôêÂà∂ÂíåÂ§ÑÁêÜÂèÇÊï∞

**ÂëΩ‰ª§Ë°åÁïåÈù¢Ôºö**
```bash
--model/-m: Ê®°ÂûãË∑ØÂæÑÊåáÂÆö
--source/-s: ËßÜÈ¢ëÊ∫êÊàñÊëÑÂÉèÂ§¥ËæìÂÖ•
--device/-d: ËøêË°åËÆæÂ§áÈÄâÊã© (auto/cpu/cuda)
--batch-size/-b: Â§ÑÁêÜÊâπÊ¨°Â§ßÂ∞è
--max-frames/-f: ÊúÄÂ§ßÂ∏ßÂ§ÑÁêÜÈôêÂà∂
--output-format/-o: ÂØºÂá∫Ê†ºÂºèÈÄâÊã©
--verbose/-v: ËØ¶ÁªÜ‰ø°ÊÅØÊòæÁ§∫
--show-detections: ÂêØÁî®Ê£ÄÊµãÁªìÊûúÊòæÁ§∫
--show-progress: ÂêØÁî®ËøõÂ∫¶ÁõëÊéß
```

**ÊîπËøõÔºö**
- **Â¢ûÂº∫ÈîôËØØÂ§ÑÁêÜ**ÔºöÂÖ®Èù¢ÁöÑÂºÇÂ∏∏ÊçïËé∑ÂíåÁî®Êà∑ÂèãÂ•ΩÁöÑÈîôËØØÊ∂àÊÅØ
- **Ëá™Âä®È™åËØÅ**ÔºöËæìÂÖ•È™åËØÅÂíåËÆæÂ§áËÉΩÂäõÊ£ÄÊü•
- **ÊÄßËÉΩÊåáÊ†á**ÔºöÁ¥ØÁßØÂíåÁû¨Êó∂FPSËÆ°ÁÆó
- **ÁÅµÊ¥ªI/O**ÔºöÊîØÊåÅÂêÑÁßçËæìÂÖ•Ê∫êÂíåËæìÂá∫ÁõÆÊ†á

---

### ÁâàÊú¨ A (27.06.2025-08.07.2025) - benchmark.py
#### üèÅ **ÂàùÂßãÁâàÊú¨ - Âü∫Á°ÄYOLOÂü∫ÂáÜÊµãËØïÂ∑•ÂÖ∑**

**Ê†∏ÂøÉÂäüËÉΩÔºö**
- **YOLOv8ÊÄßËÉΩÂü∫ÂáÜÊµãËØï**ÔºöÁõÆÊ†áÊ£ÄÊµãËØÑ‰º∞ÁöÑÂü∫Á°ÄÂÆûÁé∞
- **ËßÜÈ¢ëÂ§ÑÁêÜÊµÅÊ∞¥Á∫ø**ÔºöÊîØÊåÅËßÜÈ¢ëÊñá‰ª∂ËæìÂÖ• (bolt-detection.mp4)
- **‰∏âÈò∂ÊÆµÊó∂Èó¥ÂàÜÊûê**ÔºöÈ¢ÑÂ§ÑÁêÜ„ÄÅÊé®ÁêÜ„ÄÅÂêéÂ§ÑÁêÜÊó∂Èó¥ÊµãÈáè
- **Á≥ªÁªüËµÑÊ∫êÁõëÊéß**ÔºöÂÆûÊó∂CPU‰ΩøÁî®Áéá„ÄÅÂÜÖÂ≠òÊ∂àËÄó„ÄÅGPUÂà©Áî®ÁéáËøΩË∏™
- **Ë∑®Âπ≥Âè∞ËÆæÂ§áÊîØÊåÅ**ÔºöCUDA GPUÂíåCPUÂ§ÑÁêÜÂÖºÂÆπÊÄß
- **ÁªüËÆ°ÂàÜÊûê**ÔºöÊâÄÊúâÊÄßËÉΩÊåáÊ†áÁöÑÊúÄÂ∞èÂÄº„ÄÅÊúÄÂ§ßÂÄº„ÄÅÂπ≥ÂùáÂÄºËÆ°ÁÆó
- **ÁªìÊûúÂØºÂá∫**ÔºöËá™Âä®‰øùÂ≠òÂà∞hostname.txtÔºåÊ†ºÂºèÂåñËæìÂá∫
- **ÂÆûÊó∂ÊòæÁ§∫**ÔºöÊéßÂà∂Âè∞ËæìÂá∫ÔºåÂåÖÂê´ÂÆûÊó∂ÊÄßËÉΩÁªüËÆ°

**ÊäÄÊúØÂü∫Á°ÄÔºö**
- **ultralyticsÊ°ÜÊû∂**ÔºöÊ†∏ÂøÉYOLOÊ®°ÂûãÂÆûÁé∞
- **pynvmlÈõÜÊàê**ÔºöNVIDIA GPUÁõëÊéßËÉΩÂäõ
- **psutilÁ≥ªÁªüÁõëÊéß**ÔºöË∑®Âπ≥Âè∞Á≥ªÁªüËµÑÊ∫êËøΩË∏™
- **Â§öÁ∫øÁ®ãÊû∂ÊûÑ**ÔºöËµÑÊ∫êÁõëÊéßÁã¨Á´ãÁ∫øÁ®ã
- **numpyÁªüËÆ°ËÆ°ÁÆó**ÔºöÈ´òÊïàÊï∞ÂÄºËÆ°ÁÆó

**ÊÄßËÉΩÊåáÊ†áÔºö**
- Â∏ßÂ§ÑÁêÜÈÄüÁéá (FPS)
- ÂêÑÈò∂ÊÆµÊó∂Èó¥ÂàÜËß£
- ËµÑÊ∫êÂà©Áî®ÁéáÊ®°Âºè
- ÂÜÖÂ≠ò‰ΩøÁî®‰ºòÂåñ
- GPUÊïàÁéáÂàÜÊûê

---

## üìà Êï¥‰ΩìÊºîËøõË∂ãÂäø

### ÂäüËÉΩÊºîËøõ
```
A ‚Üí B: ÂëΩ‰ª§Ë°åÁïåÈù¢Âåñ
B ‚Üí C: Â§öÊ®°ÂûãÊîØÊåÅ  
C ‚Üí D: Áî®Êà∑‰ΩìÈ™å‰ºòÂåñ
D ‚Üí E: Â§ö‰ªªÂä°Êâ©Â±ï
E ‚Üí F: ÂÆåÊï¥Êó•ÂøóÁ≥ªÁªü
F ‚Üí G: ÂèØËßÜÂåñÊ∏≤ÊüìÂºïÊìé
G ‚Üí H: ÂèåÊ®°ÂºèËøêË°å
H ‚Üí I: ÂäüËÉΩÂÆåÂñÑ
```

### ÊäÄÊúØÊ†àÊºîËøõ
- **Ê∑±Â∫¶Â≠¶‰π†Ê°ÜÊû∂**: `ultralytics` ‚Üí `+ timm` ‚Üí `+ torchvision` ‚Üí `+ segmentation_models_pytorch`
- **ÂèØËßÜÂåñÊäÄÊúØ**: `matplotlib` ‚Üí `+ seaborn` ‚Üí `+ PIL/OpenCVÊ∏≤Êüì`
- **Êï∞ÊçÆÂ§ÑÁêÜ**: `Âü∫Á°Änumpy` ‚Üí `+ Â§öÊï∞ÊçÆÈõÜÂä†ËΩΩÂô®` ‚Üí `+ ÂêàÊàêÊï∞ÊçÆÁîüÊàê`
- **Á≥ªÁªüÁõëÊéß**: `Âü∫Á°ÄÁõëÊéß` ‚Üí `+ ËØ¶ÁªÜÊó•Âøó` ‚Üí `+ ÂÆåÊï¥ËøΩË∏™`

### ËæìÂá∫Ê†ºÂºèÊºîËøõ
**ÊñáÊú¨ËæìÂá∫** ‚Üí **Â§öÊ†ºÂºèËæìÂá∫** ‚Üí **ÂèØËßÜÂåñÂõæË°®** ‚Üí **ËØ¶ÁªÜCSV** ‚Üí **ÂÆåÊï¥Êó•Âøó** ‚Üí **Ê∏≤ÊüìÁªìÊûú**

### Áî®Êà∑‰ΩìÈ™åÊºîËøõ
**Á°¨ÁºñÁ†ÅÈÖçÁΩÆ** ‚Üí **CLIÂèÇÊï∞** ‚Üí **‰∫§‰∫íÂºèÁïåÈù¢** ‚Üí **ÂØºËà™‰ºòÂåñ** ‚Üí **ÂÆåÊï¥ËøΩË∏™**

---

## üõ†Ô∏è ÂäüËÉΩÂØπÊØîÁü©Èòµ

| ÂäüËÉΩÁâπÊÄß | A | B | C | D | E | F | G | H | I |
|---------|---|---|---|---|---|---|---|---|
| YOLOÊ£ÄÊµã | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| ÂõæÂÉèÂàÜÁ±ª | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| ËØ≠‰πâÂàÜÂâ≤ | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| CLIÂèÇÊï∞ | ‚ùå | ‚úÖ | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ |
| ‰∫§‰∫íÂºèUI | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| ËøîÂõûÂØºËà™ | ‚ùå | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| Ëá™ÂÆö‰πâÊ†∑Êú¨Êï∞ | ‚ùå | ‚úÖ | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| ÂèØËßÜÂåñÂõæË°® | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| ËØ¶ÁªÜCSV | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| ÂÆåÊï¥Êó•Âøó | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| Ê∏≤ÊüìÂºïÊìé | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ |
| Ê®°ÂùóÂåñÊû∂ÊûÑ | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ |
| ÊâπÂ§ÑÁêÜÊîØÊåÅ | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ |
| ÂèåÊ®°ÂºèËøêË°å | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ |

